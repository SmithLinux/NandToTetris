// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // first step will likely be creating a logic design for zeroing and negating a 16-bit value
    Add16(a[0..15]=true, b[0]=zx, out=zxto16);
    Add16(a[0..15]=true, b[0]=zy, out=zyto16);

    // zero the x input zx
    And16(a=zxto16, b=x, out=zerox);

    // zero the y input zy
    And16(a=zyto16, b=y, out=zeroy);

    // negate all the x input, if nx == 1 then Nand the nx with the x input.
    Not16(in=zerox, out=notx);
    Mux16(a=zerox, b=notx, sel=nx, out=nxout);

    // negate all the y input, if ny == 1 then Nand the ny with the y input.
    Not16(in=zeroy, out=noty);
    Mux16(a=zeroy, b=noty, sel=ny, out=nyout);

    // if f then output x + y otherwise x & y
    
    Add16(a=nxout, b=nyout, out= xplusy);
    And16(a=nxout, b=nyout, out= xandy);
    Mux16(a=xandy, b=xplusy, sel=f, out=fout);

    // if no then output = !output
    Not16(in=fout, out=nfout);
    Mux16(a=fout, b=nfout, sel=no, out=out, out[0..7]=halfout, out[8..15]=restout, out[15]=ng);

    // is zr use overflow
    Or8Way(in=halfout, out=hout);
    Or8Way(in=restout, out=rout);
    Or(a=hout, b=rout, out=result);
    Not(in=result, out=zr);
}
